/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p/>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thu.instcloud.app.se.storm.matworker;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-09")
public class MatWorkerService {

    public interface Iface {

        public int runTask(String caseid, List<String> zoneids, String task) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void runTask(String caseid, List<String> zoneids, String task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public int runTask(String caseid, List<String> zoneids, String task) throws org.apache.thrift.TException {
            send_runTask(caseid, zoneids, task);
            return recv_runTask();
        }

        public void send_runTask(String caseid, List<String> zoneids, String task) throws org.apache.thrift.TException {
            runTask_args args = new runTask_args();
            args.setCaseid(caseid);
            args.setZoneids(zoneids);
            args.setTask(task);
            sendBase("runTask", args);
        }

        public int recv_runTask() throws org.apache.thrift.TException {
            runTask_result result = new runTask_result();
            receiveBase(result, "runTask");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runTask failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void runTask(String caseid, List<String> zoneids, String task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            runTask_call method_call = new runTask_call(caseid, zoneids, task, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class runTask_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String caseid;
            private List<String> zoneids;
            private String task;

            public runTask_call(String caseid, List<String> zoneids, String task, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.caseid = caseid;
                this.zoneids = zoneids;
                this.task = task;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
                runTask_args args = new runTask_args();
                args.setCaseid(caseid);
                args.setZoneids(zoneids);
                args.setTask(task);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_runTask();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("runTask", new runTask());
            return processMap;
        }

        public static class runTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runTask_args> {
            public runTask() {
                super("runTask");
            }

            public runTask_args getEmptyArgsInstance() {
                return new runTask_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public runTask_result getResult(I iface, runTask_args args) throws org.apache.thrift.TException {
                runTask_result result = new runTask_result();
                result.success = iface.runTask(args.caseid, args.zoneids, args.task);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("runTask", new runTask());
            return processMap;
        }

        public static class runTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runTask_args, Integer> {
            public runTask() {
                super("runTask");
            }

            public runTask_args getEmptyArgsInstance() {
                return new runTask_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        runTask_result result = new runTask_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        runTask_result result = new runTask_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, runTask_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.runTask(args.caseid, args.zoneids, args.task, resultHandler);
            }
        }

    }

    public static class runTask_args implements org.apache.thrift.TBase<runTask_args, runTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<runTask_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runTask_args");
        private static final org.apache.thrift.protocol.TField CASEID_FIELD_DESC = new org.apache.thrift.protocol.TField("caseid", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ZONEIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneids", org.apache.thrift.protocol.TType.LIST, (short) 2);
        private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new runTask_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new runTask_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CASEID, new org.apache.thrift.meta_data.FieldMetaData("caseid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ZONEIDS, new org.apache.thrift.meta_data.FieldMetaData("zoneids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runTask_args.class, metaDataMap);
        }

        public String caseid; // required
        public List<String> zoneids; // required
        public String task; // required

        public runTask_args() {
        }

        public runTask_args(
                String caseid,
                List<String> zoneids,
                String task) {
            this();
            this.caseid = caseid;
            this.zoneids = zoneids;
            this.task = task;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public runTask_args(runTask_args other) {
            if (other.isSetCaseid()) {
                this.caseid = other.caseid;
            }
            if (other.isSetZoneids()) {
                List<String> __this__zoneids = new ArrayList<String>(other.zoneids);
                this.zoneids = __this__zoneids;
            }
            if (other.isSetTask()) {
                this.task = other.task;
            }
        }

        public runTask_args deepCopy() {
            return new runTask_args(this);
        }

        @Override
        public void clear() {
            this.caseid = null;
            this.zoneids = null;
            this.task = null;
        }

        public String getCaseid() {
            return this.caseid;
        }

        public runTask_args setCaseid(String caseid) {
            this.caseid = caseid;
            return this;
        }

        public void unsetCaseid() {
            this.caseid = null;
        }

        /** Returns true if field caseid is set (has been assigned a value) and false otherwise */
        public boolean isSetCaseid() {
            return this.caseid != null;
        }

        public void setCaseidIsSet(boolean value) {
            if (!value) {
                this.caseid = null;
            }
        }

        public int getZoneidsSize() {
            return (this.zoneids == null) ? 0 : this.zoneids.size();
        }

        public java.util.Iterator<String> getZoneidsIterator() {
            return (this.zoneids == null) ? null : this.zoneids.iterator();
        }

        public void addToZoneids(String elem) {
            if (this.zoneids == null) {
                this.zoneids = new ArrayList<String>();
            }
            this.zoneids.add(elem);
        }

        public List<String> getZoneids() {
            return this.zoneids;
        }

        public runTask_args setZoneids(List<String> zoneids) {
            this.zoneids = zoneids;
            return this;
        }

        public void unsetZoneids() {
            this.zoneids = null;
        }

        /** Returns true if field zoneids is set (has been assigned a value) and false otherwise */
        public boolean isSetZoneids() {
            return this.zoneids != null;
        }

        public void setZoneidsIsSet(boolean value) {
            if (!value) {
                this.zoneids = null;
            }
        }

        public String getTask() {
            return this.task;
        }

        public runTask_args setTask(String task) {
            this.task = task;
            return this;
        }

        public void unsetTask() {
            this.task = null;
        }

        /** Returns true if field task is set (has been assigned a value) and false otherwise */
        public boolean isSetTask() {
            return this.task != null;
        }

        public void setTaskIsSet(boolean value) {
            if (!value) {
                this.task = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CASEID:
                    if (value == null) {
                        unsetCaseid();
                    } else {
                        setCaseid((String) value);
                    }
                    break;

                case ZONEIDS:
                    if (value == null) {
                        unsetZoneids();
                    } else {
                        setZoneids((List<String>) value);
                    }
                    break;

                case TASK:
                    if (value == null) {
                        unsetTask();
                    } else {
                        setTask((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CASEID:
                    return getCaseid();

                case ZONEIDS:
                    return getZoneids();

                case TASK:
                    return getTask();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CASEID:
                    return isSetCaseid();
                case ZONEIDS:
                    return isSetZoneids();
                case TASK:
                    return isSetTask();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof runTask_args)
                return this.equals((runTask_args) that);
            return false;
        }

        public boolean equals(runTask_args that) {
            if (that == null)
                return false;

            boolean this_present_caseid = true && this.isSetCaseid();
            boolean that_present_caseid = true && that.isSetCaseid();
            if (this_present_caseid || that_present_caseid) {
                if (!(this_present_caseid && that_present_caseid))
                    return false;
                if (!this.caseid.equals(that.caseid))
                    return false;
            }

            boolean this_present_zoneids = true && this.isSetZoneids();
            boolean that_present_zoneids = true && that.isSetZoneids();
            if (this_present_zoneids || that_present_zoneids) {
                if (!(this_present_zoneids && that_present_zoneids))
                    return false;
                if (!this.zoneids.equals(that.zoneids))
                    return false;
            }

            boolean this_present_task = true && this.isSetTask();
            boolean that_present_task = true && that.isSetTask();
            if (this_present_task || that_present_task) {
                if (!(this_present_task && that_present_task))
                    return false;
                if (!this.task.equals(that.task))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_caseid = true && (isSetCaseid());
            list.add(present_caseid);
            if (present_caseid)
                list.add(caseid);

            boolean present_zoneids = true && (isSetZoneids());
            list.add(present_zoneids);
            if (present_zoneids)
                list.add(zoneids);

            boolean present_task = true && (isSetTask());
            list.add(present_task);
            if (present_task)
                list.add(task);

            return list.hashCode();
        }

        @Override
        public int compareTo(runTask_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCaseid()).compareTo(other.isSetCaseid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCaseid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseid, other.caseid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetZoneids()).compareTo(other.isSetZoneids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetZoneids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneids, other.zoneids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTask()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("runTask_args(");
            boolean first = true;

            sb.append("caseid:");
            if (this.caseid == null) {
                sb.append("null");
            } else {
                sb.append(this.caseid);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("zoneids:");
            if (this.zoneids == null) {
                sb.append("null");
            } else {
                sb.append(this.zoneids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("task:");
            if (this.task == null) {
                sb.append("null");
            } else {
                sb.append(this.task);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CASEID((short) 1, "caseid"),
            ZONEIDS((short) 2, "zoneids"),
            TASK((short) 3, "task");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CASEID
                        return CASEID;
                    case 2: // ZONEIDS
                        return ZONEIDS;
                    case 3: // TASK
                        return TASK;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class runTask_argsStandardSchemeFactory implements SchemeFactory {
            public runTask_argsStandardScheme getScheme() {
                return new runTask_argsStandardScheme();
            }
        }

        private static class runTask_argsStandardScheme extends StandardScheme<runTask_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, runTask_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CASEID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.caseid = iprot.readString();
                                struct.setCaseidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ZONEIDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.zoneids = new ArrayList<String>(_list0.size);
                                    String _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                        _elem1 = iprot.readString();
                                        struct.zoneids.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setZoneidsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TASK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.task = iprot.readString();
                                struct.setTaskIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, runTask_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.caseid != null) {
                    oprot.writeFieldBegin(CASEID_FIELD_DESC);
                    oprot.writeString(struct.caseid);
                    oprot.writeFieldEnd();
                }
                if (struct.zoneids != null) {
                    oprot.writeFieldBegin(ZONEIDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.zoneids.size()));
                        for (String _iter3 : struct.zoneids) {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.task != null) {
                    oprot.writeFieldBegin(TASK_FIELD_DESC);
                    oprot.writeString(struct.task);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class runTask_argsTupleSchemeFactory implements SchemeFactory {
            public runTask_argsTupleScheme getScheme() {
                return new runTask_argsTupleScheme();
            }
        }

        private static class runTask_argsTupleScheme extends TupleScheme<runTask_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, runTask_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCaseid()) {
                    optionals.set(0);
                }
                if (struct.isSetZoneids()) {
                    optionals.set(1);
                }
                if (struct.isSetTask()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCaseid()) {
                    oprot.writeString(struct.caseid);
                }
                if (struct.isSetZoneids()) {
                    {
                        oprot.writeI32(struct.zoneids.size());
                        for (String _iter4 : struct.zoneids) {
                            oprot.writeString(_iter4);
                        }
                    }
                }
                if (struct.isSetTask()) {
                    oprot.writeString(struct.task);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, runTask_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.caseid = iprot.readString();
                    struct.setCaseidIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.zoneids = new ArrayList<String>(_list5.size);
                        String _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = iprot.readString();
                            struct.zoneids.add(_elem6);
                        }
                    }
                    struct.setZoneidsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.task = iprot.readString();
                    struct.setTaskIsSet(true);
                }
            }
        }

    }

    public static class runTask_result implements org.apache.thrift.TBase<runTask_result, runTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<runTask_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runTask_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new runTask_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new runTask_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runTask_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public runTask_result() {
        }

        public runTask_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public runTask_result(runTask_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public runTask_result deepCopy() {
            return new runTask_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public runTask_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof runTask_result)
                return this.equals((runTask_result) that);
            return false;
        }

        public boolean equals(runTask_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(runTask_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("runTask_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class runTask_resultStandardSchemeFactory implements SchemeFactory {
            public runTask_resultStandardScheme getScheme() {
                return new runTask_resultStandardScheme();
            }
        }

        private static class runTask_resultStandardScheme extends StandardScheme<runTask_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, runTask_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, runTask_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class runTask_resultTupleSchemeFactory implements SchemeFactory {
            public runTask_resultTupleScheme getScheme() {
                return new runTask_resultTupleScheme();
            }
        }

        private static class runTask_resultTupleScheme extends TupleScheme<runTask_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, runTask_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, runTask_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
